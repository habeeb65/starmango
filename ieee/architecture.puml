@startuml Starmango Architecture Overview
!define RECTANGLE class
skinparam backgroundColor #F5F5F5
skinparam classBackgroundColor #FFFFFF
skinparam classBorderColor #333333
skinparam classFontStyle bold
skinparam shadowing true
skinparam roundCorner 10

' ===== COMPONENT DIAGRAM =====
title Component View of Starmango Architecture

package "Frontend" as frontend {
  [React SPA] as react
  [PWA] as pwa
  [Chakra UI] as chakra
  [Redux Toolkit] as redux
  [React Query] as rq
  [Axios] as axios
  [React Router] as router
  [Web Workers] as workers
}

package "API Layer" as api {
  [Nginx] as nginx
  [JWT Auth] as jwt
  [Rate Limiter] as rate
  [Tenant Resolver] as tenant_resolver
}

package "Backend Services" as backend {
  [Django REST] as drf
  [Django Channels] as channels
  [Celery] as celery
  [Redis] as redis
  [Tenant Middleware] as tenant_middleware
}

package "Data Layer" as data {
  [PostgreSQL] as pg
  [Row-level Security] as rls
  [Multi-tenant Schema] as mts
  [Redis Cache] as rcache
}

' Connections
react --> pwa
react --> chakra
react --> redux
react --> rq
react --> axios
react --> router
react --> workers

nginx --> jwt
jwt --> rate
rate --> tenant_resolver
tenant_resolver --> drf

drf --> pg
drf --> redis
channels --> redis
celery --> redis
tenant_middleware --> pg

pg --> rls
pg --> mts

@enduml

@startuml Starmango Sequence Diagram
!define RECTANGLE participant
skinparam backgroundColor #F5F5F5
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
title User Authentication Flow

actor User
participant "React Frontend" as FE
participant "Nginx" as NG
participant "Auth Service" as AUTH
participant "Tenant Resolver" as TR
participant "Django REST" as DRF
participant "PostgreSQL" as PG
participant "Redis" as RD

User -> FE: Enters credentials
FE -> NG: POST /api/auth/login
NG -> AUTH: Forward request
AUTH -> PG: Validate credentials
PG --> AUTH: User data
AUTH -> TR: Resolve tenant
TR -> PG: Get tenant info
PG --> TR: Tenant data
TR -> AUTH: Tenant context
AUTH -> RD: Cache session
RD --> AUTH: Session ID
AUTH --> NG: JWT token
NG --> FE: Return token + tenant data
FE -> RD: Cache session
FE -> User: Show dashboard

@enduml

@startuml Starmango Deployment Diagram
!define NODE node
skinparam backgroundColor #F5F5F5
skinparam nodeBackgroundColor #E1F5FE
skinparam nodeBorderColor #0288D1
skinparam databaseBackgroundColor #E8F5E9
skinparam databaseBorderColor #388E3C
skinparam queueBackgroundColor #FFF3E0
skinparam queueBorderColor #F57C00

node "Web Tier" {
  [Nginx Load Balancer] as lb
  [Web Server 1] as ws1
  [Web Server 2] as ws2
  [Web Server 3] as ws3
}

node "Application Tier" {
  [Django REST] as drf1
  [Django REST] as drf2
  [Celery Workers] as workers
  [Redis] as redis
}

node "Database Tier" {
  [PostgreSQL Primary] as pg_primary
  [PostgreSQL Replica 1] as pg_replica1
  [PostgreSQL Replica 2] as pg_replica2
  [Backup Server] as backup
}

node "Storage" {
  [S3 Compatible Storage] as s3
}

' Connections
lb --> ws1
lb --> ws2
lb --> ws3

ws1 --> drf1
ws2 --> drf2
ws3 --> drf2

drf1 --> pg_primary
drf2 --> pg_primary
workers --> pg_primary

pg_primary --> pg_replica1
pg_primary --> pg_replica2
pg_primary --> backup

drf1 --> redis
drf2 --> redis
workers --> redis

drf1 --> s3
drf2 --> s3
workers --> s3

@enduml

@startuml Starmango Multi-tenant Data Flow
!define RECTANGLE class
skinparam backgroundColor #F5F5F5
title Multi-tenant Data Flow

package "Frontend" {
  [Dashboard] as dashboard
  [Tenant Selector] as selector
}

package "Backend" {
  [Tenant Middleware] as middleware
  [Tenant Model] as tmodel
  [Tenant Manager] as tmanager
  [Database] as db
}

database "PostgreSQL" {
  [Tenant Table] as tenants
  [Shared Schema] as shared
  [Tenant Schemas] as tenant_schemas
}

dashboard --> selector: Select tenant
selector --> middleware: Set tenant context
middleware -> tmanager: Get tenant
tmanager -> db: Query tenant
db --> tmanager: Return tenant
tmanager --> middleware: Tenant object
middleware -> tmodel: Set current tenant
tmodel --> middleware: Confirmation

middleware -> shared: Route query
shared --> middleware: Shared data
middleware -> tenant_schemas: Route with tenant context
tenant_schemas --> middleware: Tenant data
middleware --> dashboard: Combined response

@enduml

@startuml Starmango Component Interaction
!define RECTANGLE component
skinparam backgroundColor #F5F5F5
title Component Interaction

package "Web Client" {
  [Dashboard] as dashboard
  [Auth] as auth
  [API Client] as api
  [State Store] as state
}

package "Backend" {
  [API Gateway] as gateway
  [Auth Service] as auth_svc
  [Tenant Service] as tenant_svc
  [Product Service] as product_svc
  [Order Service] as order_svc
  [Notification Service] as notif_svc
}

database "PostgreSQL" as pg
queue "Redis" as redis

dashboard --> api: Fetch data
api --> gateway: HTTP Request
gateway -> auth_svc: Validate token
auth_svc --> gateway: User + Tenant info

gateway -> tenant_svc: Get tenant config
tenant_svc --> gateway: Config

gateway -> product_svc: Get products
product_svc -> pg: Query products
pg --> product_svc: Return products
product_svc --> gateway: Products

gateway -> order_svc: Get orders
order_svc -> pg: Query orders
pg --> order_svc: Return orders
order_svc --> gateway: Orders

gateway -> notif_svc: Get notifications
notif_svc -> redis: Get unread
redis --> notif_svc: Notifications
notif_svc --> gateway: Notifications

gateway --> api: Combined response
api -> state: Update state
state --> dashboard: Re-render

@enduml
